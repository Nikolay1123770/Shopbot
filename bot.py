import telebot
import configure
import sqlite3
from telebot import types
import threading

client = telebot.TeleBot(configure.config['token'])
db = sqlite3.connect('baza.db', check_same_thread=False)
lock = threading.Lock()

def get_cursor():
    return db.cursor()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Ç–µ–∫—É—â–µ–π –ø–æ–∫—É–ø–∫–∏
current_purchase_id = None

# --- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü ---
with lock:
    cur = get_cursor()
    cur.execute("""CREATE TABLE IF NOT EXISTS users (
        id BIGINT,
        nick TEXT,
        cash INT,
        access INT,
        bought INT
    )""")
    cur.execute("""CREATE TABLE IF NOT EXISTS shop (
        id INT,
        name TEXT,
        price INT,
        tovar TEXT,
        whobuy TEXT
    )""")
    db.commit()

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–µ–Ω—é ---

def main_menu(access_level=0):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_shop = types.KeyboardButton("üõç –ú–∞–≥–∞–∑–∏–Ω")
    btn_donate = types.KeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
    btn_mybuy = types.KeyboardButton("üìú –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏")
    btn_help = types.KeyboardButton("üÜò –ü–æ–º–æ—â—å")
    btn_profile = types.KeyboardButton("‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å")
    markup.row(btn_shop, btn_donate)
    markup.row(btn_mybuy, btn_help, btn_profile)
    if access_level >= 1:
        btn_admin = types.KeyboardButton("üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        markup.add(btn_admin)
    return markup

def admin_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_addbuy = types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
    btn_editbuy = types.KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä")
    btn_rembuy = types.KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
    btn_users = types.KeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    btn_back = types.KeyboardButton("üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    markup.row(btn_addbuy, btn_editbuy, btn_rembuy)
    markup.row(btn_users)
    markup.row(btn_back)
    return markup

# --- –•–ï–ù–î–õ–ï–†–´ ---

@client.message_handler(commands=['start'])
def start(message):
    cid = message.chat.id
    uid = message.from_user.id
    nick = message.from_user.first_name
    cur = get_cursor()
    cur.execute("SELECT * FROM users WHERE id = ?", (uid,))
    user = cur.fetchone()
    if user is None:
        if uid in [7006370658, 6916747393]:
            cur.execute("INSERT INTO users VALUES (?, ?, ?, ?, ?)", (uid, nick, 0, 777, 0))
        else:
            cur.execute("INSERT INTO users VALUES (?, ?, ?, ?, ?)", (uid, nick, 0, 0, 0))
        db.commit()
        access = 777 if uid in [7006370658, 6916747393] else 0
        client.send_message(cid, 
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {nick}!\n–¢—ã –ø–æ–ø–∞–ª –≤ –±–æ—Ç–∞-–º–∞–≥–∞–∑–∏–Ω. –ò–∑–º–µ–Ω–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥ —Å–µ–±—è!",
            reply_markup=main_menu(access)
        )
    else:
        access = user[3]
        client.send_message(cid,
            "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu(access)
        )

@client.message_handler(commands=['help'])
def helpcmd(message):
    cid = message.chat.id
    uid = message.from_user.id
    cur = get_cursor()
    cur.execute("SELECT * FROM users WHERE id = ?", (uid,))
    user = cur.fetchone()
    if not user:
        client.send_message(cid, "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!")
        return
    access = user[3]
    text = (
        "üìã *–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:*\n\n"
        "/start ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/profile ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/help ‚Äî –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/buy ‚Äî –ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
        "/donate ‚Äî –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç\n"
        "/mybuy ‚Äî –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏\n"
        "\n–ê–¥–º–∏–Ω—Å–∫–∏–µ:\n"
        "/makeadmin ‚Äî –°–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º\n"
        "/giverub ‚Äî –í—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏\n"
        "/addbuy ‚Äî –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
        "/editbuy ‚Äî –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
        "/rembuy ‚Äî –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
        "/users ‚Äî –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    )
    client.send_message(cid, text, parse_mode='Markdown', reply_markup=main_menu(access))

@client.message_handler(commands=['profile','myprofile'])
def myprofile(message):
    cid = message.chat.id
    uid = message.from_user.id
    cur = get_cursor()
    cur.execute("SELECT * FROM users WHERE id = ?", (uid,))
    user = cur.fetchone()
    if not user:
        client.send_message(cid, "‚õî –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start.")
        return
    user_id, nick, cash, access, bought = user
    if access == 0:
        accessname = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    elif access == 1:
        accessname = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    elif access == 777:
        accessname = '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'
    else:
        accessname = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    text = (
        f"‚öôÔ∏è *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n"
        f"üë§ *ID:* {user_id}\n"
        f"üí∏ *–ë–∞–ª–∞–Ω—Å:* {cash} ‚ÇΩ\n"
        f"üëë *–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:* {accessname}\n"
        f"üì¶ *–ö—É–ø–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:* {bought}\n"
    )
    client.send_message(cid, text, parse_mode='Markdown', reply_markup=main_menu(access))

@client.message_handler(commands=['makeadmin'])
def make_admin(message):
    cid = message.chat.id
    args = message.text.split()
    if len(args) < 2:
        client.send_message(cid, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /makeadmin <user_id>")
        return
    uid = message.from_user.id
    cur = get_cursor()
    cur.execute("SELECT access FROM users WHERE id = ?", (uid,))
    row = cur.fetchone()
    if not row or row[0] < 1:
        client.send_message(cid, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞!")
        return
    try:
        target_id = int(args[1])
        cur.execute("SELECT * FROM users WHERE id = ?", (target_id,))
        user = cur.fetchone()
        if not user:
            client.send_message(cid, "‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        cur.execute("UPDATE users SET access = 1 WHERE id = ?", (target_id,))
        db.commit()
        client.send_message(cid, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ç–µ–ø–µ—Ä—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
    except ValueError:
        client.send_message(cid, "‚õî –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ–º).")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞ ---
@client.message_handler(commands=['buy'])
def buy_command(message):
    cid = message.chat.id
    uid = message.from_user.id
    cur = get_cursor()
    text = "üõç *–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:*\n\n"
    markup = types.InlineKeyboardMarkup(row_width=1)
    for item in cur.execute("SELECT * FROM shop"):
        item_id, name, price, tovar, whobuy = item
        button = types.InlineKeyboardButton(text=f"{name} - {price}‚ÇΩ", callback_data=f"buy_{item_id}")
        markup.add(button)
        text += f"{item_id}. {name} - {price}‚ÇΩ\n"
    client.send_message(cid, text, parse_mode='Markdown', reply_markup=markup)

@client.callback_query_handler(func=lambda call: call.data.startswith("buy_"))
def callback_buy(call):
    cid = call.message.chat.id
    uid = call.from_user.id
    try:
        product_id = int(call.data.split("_")[1])
    except:
        client.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞!")
        return
    cur = get_cursor()
    cur.execute("SELECT * FROM shop WHERE id = ?", (product_id,))
    product = cur.fetchone()
    if not product:
        client.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    global current_purchase_id
    current_purchase_id = product_id

    # –ü—Ä–æ—Å—Ç–æ –¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ donate.stream –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ 404
    payment_url = configure.config.get('payment_url', 'https://donate.stream/').rstrip('/')
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn_pay = types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)
    btn_paid = types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{product_id}")
    markup.add(btn_pay, btn_paid)

    client.send_message(cid, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: {product[1]} –∑–∞ {product[2]}‚ÇΩ.\n–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ (—Å—É–º–º—É —É–∫–∞–∂–∏—Ç–µ –≤—Ä—É—á–Ω—É—é) –∏ –Ω–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏–ª', –∫–æ–≥–¥–∞ –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞.", reply_markup=markup)
    client.answer_callback_query(call.id)

@client.callback_query_handler(func=lambda call: call.data.startswith("paid_"))
def callback_paid(call):
    cid = call.message.chat.id
    uid = call.from_user.id
    # –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏–ª" –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π ID
    client.send_message(cid, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:")
    client.answer_callback_query(call.id)
    client.register_next_step_handler(call.message, handle_game_id)

def handle_game_id(message):
    uid = message.from_user.id
    game_id = message.text
    cur = get_cursor()
    cur.execute("SELECT * FROM shop WHERE id = ?", (current_purchase_id,))
    product = cur.fetchone()
    if product:
        client.send_message(uid, f"‚úÖ –°–ø–∞—Å–∏–±–æ!\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π ID: {game_id}\n\n–¢–æ–≤–∞—Ä: {product[3]}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
        client.send_message(596060542, f"‚úâÔ∏è | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∫—É–ø–∏–ª —Ç–æ–≤–∞—Ä {product[1]}.\n–ò–≥—Ä–æ–≤–æ–π ID: {game_id}")
    else:
        client.send_message(uid, "üö´ | –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ---
@client.message_handler(func=lambda m: m.text == "üõç –ú–∞–≥–∞–∑–∏–Ω")
def button_shop(message):
    buy_command(message)

@client.message_handler(func=lambda m: m.text == "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
def button_donate(message):
    cid = message.chat.id
    uid = message.from_user.id
    cur = get_cursor()
    cur.execute("SELECT access FROM users WHERE id = ?", (uid,))
    row = cur.fetchone()
    access = row[0] if row else 0
    payment_url = configure.config.get('payment_url', 'https://donate.stream/')
    client.send_message(cid, f"üí∞ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{payment_url}\n\n–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤—Ä—É—á–Ω—É—é. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤.", reply_markup=main_menu(access))

@client.message_handler(func=lambda m: m.text == "üìú –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏")
def button_mybuy(message):
    cid = message.chat.id
    uid = message.from_user.id
    cur = get_cursor()
    cur.execute("SELECT * FROM users WHERE id = ?", (uid,))
    user = cur.fetchone()
    if not user:
        client.send_message(cid, "–°–Ω–∞—á–∞–ª–∞ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!")
        return
    access = user[3]
    text = "*üóÇ | –°–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:*\n\n"
    for infoshop in cur.execute("SELECT * FROM shop"):
        if str(uid) in infoshop[4]:
            text += f"*{infoshop[0]}. {infoshop[1]}*\n–¢–æ–≤–∞—Ä: {infoshop[3]}\n\n"
    client.send_message(cid, text, parse_mode='Markdown', reply_markup=main_menu(access))

@client.message_handler(func=lambda m: m.text == "üÜò –ü–æ–º–æ—â—å")
def button_help(message):
    cid = message.chat.id
    uid = message.from_user.id
    cur = get_cursor()
    cur.execute("SELECT access FROM users WHERE id = ?", (uid,))
    row = cur.fetchone()
    if not row:
        client.send_message(cid, "–°–Ω–∞—á–∞–ª–∞ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!")
        return
    access = row[0]
    text = (
        "üÜò –ü–æ–º–æ—â—å\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.\n"
        "–õ–∏–±–æ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )
    client.send_message(cid, text, reply_markup=main_menu(access))

@client.message_handler(func=lambda m: m.text == "‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å")
def button_profile(message):
    myprofile(message)

@client.message_handler(func=lambda m: m.text == "üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
def button_admin_panel(message):
    cid = message.chat.id
    uid = message.from_user.id
    cur = get_cursor()
    cur.execute("SELECT access FROM users WHERE id = ?", (uid,))
    row = cur.fetchone()
    if not row:
        client.send_message(cid, "–°–Ω–∞—á–∞–ª–∞ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!")
        return
    access = row[0]
    if access < 1:
        client.send_message(cid, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    client.send_message(cid, "üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())

@client.message_handler(func=lambda m: m.text == "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
def button_users(message):
    cid = message.chat.id
    uid = message.from_user.id
    cur = get_cursor()
    cur.execute("SELECT access FROM users WHERE id = ?", (uid,))
    row = cur.fetchone()
    if not row or row[0] < 1:
        client.send_message(cid, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
        return
    text = "*üóÉ | –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n"
    idusernumber = 0
    for info in cur.execute("SELECT * FROM users"):
        user_id, nick, cash, access_level, bought = info
        if access_level == 0:
            accessname = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        elif access_level == 1:
            accessname = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
        elif access_level == 777:
            accessname = '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'
        else:
            accessname = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        idusernumber += 1
        text += (
            f"*{idusernumber}. {user_id} ({nick})*\n"
            f"*üí∏ | –ë–∞–ª–∞–Ω—Å:* {cash} ‚ÇΩ\n"
            f"*üëë | –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:* {accessname}\n"
            f"*‚úâÔ∏è | –ü—Ä–æ—Ñ–∏–ª—å:* [{nick}](tg://user?id={user_id})\n\n"
        )
    client.send_message(cid, text, parse_mode='Markdown', reply_markup=admin_menu())

@client.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
def button_addbuy(message):
    # –í—ã–∑—ã–≤–∞–µ–º –≤–∞—à –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /addbuy
    # –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è addbuy_command(message), —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—ë
    client.send_message(message.chat.id, "/addbuy")

@client.message_handler(func=lambda m: m.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä")
def button_editbuy(message):
    client.send_message(message.chat.id, "–ü–µ—Ä–µ—Ö–æ–∂—É –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞ (–∫–æ–º–∞–Ω–¥–∞ /editbuy)")
    client.send_message(message.chat.id, "/editbuy")

@client.message_handler(func=lambda m: m.text == "‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
def button_rembuy(message):
    client.send_message(message.chat.id, "–ü–µ—Ä–µ—Ö–æ–∂—É –∫ —É–¥–∞–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞ (–∫–æ–º–∞–Ω–¥–∞ /rembuy)")
    client.send_message(message.chat.id, "/rembuy")

@client.message_handler(func=lambda m: m.text == "üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
def button_admin_back(message):
    uid = message.from_user.id
    cur = get_cursor()
    cur.execute("SELECT access FROM users WHERE id = ?", (uid,))
    row = cur.fetchone()
    if not row:
        client.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!")
        return
    access = row[0]
    client.send_message(message.chat.id, "–í—ã—Ö–æ–¥–∏–º –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", reply_markup=main_menu(access))

client.polling(none_stop=True, interval=0)
